version: '3.8'

services:
  # This is the container in which the tests are run.
  bacnet-11:
    build:
      context: ${PWD}
      dockerfile: src/test/resources/Dockerfile
    depends_on:
      bacnet-22:
        condition: service_healthy
      bacnet-33:
        condition: service_healthy
    networks:
      bacnet-network-1:
        ipv4_address: 192.168.1.11
      bacnet-network-2:
        ipv4_address: 192.168.2.11
    volumes:
      - ~/.m2:/root/.m2 # Reuses the downloaded archives on the host
      # Allows the saving of specific artifacts on the host. We don't map the entire target directory because there
      # are test assets there (in particular fileObjectTest.txt) that behave oddly when copying and deleting on mapped
      # volumes.
      - ${PWD}/target/site:/app/target/site
      - ${PWD}/target/surefire-reports:/app/target/surefire-reports
    command: mvn test jacoco:report -Penable-jacoco
    #command: tail -f /dev/null

  # This container hosts a BACnet4J instance that sends unicasts and broadcasts that the testing container can receive.
  bacnet-22:
    image: maven:3-eclipse-temurin-17
    healthcheck:
      # See DockerRemoteDevice, which creates running.txt after the local devices has been initialized. The file is
      # created in the root so that it is not shared by the volume mappings.
      test: bash -c "[ -f /running.txt ]"
      interval: 3s
      timeout: 5s
      retries: 50
    networks:
      bacnet-network-1:
        ipv4_address: 192.168.1.22
      bacnet-network-2:
        ipv4_address: 192.168.2.22
    volumes:
      - ~/.m2:/root/.m2 # Reuses the downloaded archives on the host
      - ${PWD}:/app
    working_dir: /app
    command: mvn exec:java -Dexec.classpathScope=test -Dexec.mainClass="com.serotonin.bacnet4j.docker.DockerRemoteDevice" -Dexec.args="docker-remote-device-22.properties"

  # This container hosts a BACnet4J instance that sends unicasts and broadcasts that the testing container can receive.
  bacnet-33:
    image: maven:3-eclipse-temurin-17
    healthcheck:
      # See DockerRemoteDevice, which creates running.txt after the local devices has been initialized. The file is
      # created in the root so that it is not shared by the volume mappings.
      test: bash -c "[ -f /running.txt ]"
      interval: 3s
      timeout: 5s
      retries: 50
    networks:
      bacnet-network-1:
        ipv4_address: 192.168.1.33
      bacnet-network-2:
        ipv4_address: 192.168.2.33
    volumes:
      - ~/.m2:/root/.m2 # Reuses the downloaded archives on the host
      - ${PWD}:/app
    working_dir: /app
    command: mvn exec:java -Dexec.classpathScope=test -Dexec.mainClass="com.serotonin.bacnet4j.docker.DockerRemoteDevice" -Dexec.args="docker-remote-device-33.properties"

networks:
  bacnet-network-1:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
  bacnet-network-2:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.2.0/24

volumes:
  app-data:
